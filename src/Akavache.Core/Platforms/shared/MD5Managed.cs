// Copyright (c) 2022 .NET Foundation and Contributors. All rights reserved.
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.

using System.Security.Cryptography;

// <autogenerated />
// Fetched from http://archive.msdn.microsoft.com/SilverlightMD5
// Copyright (c) Microsoft Corporation.  All rights reserved.
// **************************************************************
// * Raw implementation of the MD5 hash algorithm
// * from RFC 1321.
// *
// * Written By: Reid Borsuk and Jenny Zheng
// * Copyright (c) Microsoft Corporation.  All rights reserved.
// **************************************************************
namespace Akavache;

internal class MD5Managed : MD5
{
    private byte[] _data;
    private ABCDStruct _abcd;
    private long _totalLength;
    private int _dataSize;

    public MD5Managed()
    {
        // TODO SHANE is this ok for UWP?
#if !WINDOWS_UWP
        HashSizeValue = 0x80;
#endif
        _data = new byte[64];
        _abcd = default;
    }

    public override void Initialize()
    {
        _data = new byte[64];
        _dataSize = 0;
        _totalLength = 0;
        _abcd = default;

        // Initial values as defined in RFC 1321
        _abcd.A = 0x67452301;
        _abcd.B = 0xefcdab89;
        _abcd.C = 0x98badcfe;
        _abcd.D = 0x10325476;
    }

    protected override void HashCore(byte[] array, int ibStart, int cbSize)
    {
        var startIndex = ibStart;
        var totalArrayLength = _dataSize + cbSize;
        if (totalArrayLength >= 64)
        {
            Array.Copy(array, startIndex, _data, _dataSize, 64 - _dataSize);

            // Process message of 64 bytes (512 bits)
            MD5Core.GetHashBlock(_data, ref _abcd, 0);
            startIndex += 64 - _dataSize;
            totalArrayLength -= 64;
            while (totalArrayLength >= 64)
            {
                Array.Copy(array, startIndex, _data, 0, 64);
                MD5Core.GetHashBlock(array, ref _abcd, startIndex);
                totalArrayLength -= 64;
                startIndex += 64;
            }

            _dataSize = totalArrayLength;
            Array.Copy(array, startIndex, _data, 0, totalArrayLength);
        }
        else
        {
            Array.Copy(array, startIndex, _data, _dataSize, cbSize);
            _dataSize = totalArrayLength;
        }

        _totalLength += cbSize;
    }

    // TODO SHANE is this ok for UWP?
#if !WINDOWS_UWP
    protected override byte[] HashFinal()
    {
        HashValue = MD5Core.GetHashFinalBlock(_data, 0, _dataSize, _abcd, _totalLength * 8);
        return HashValue;
    }
#else
    protected override byte[] HashFinal() => MD5Core.GetHashFinalBlock(_data, 0, _dataSize, _abcd, _totalLength * 8);
#endif
}
